<%- include('../partials/header') %>
    <%- include('../partials/navbar') %>

        <main class="container mt-4">
            <!-- Add data attributes here to pass EJS variables to JavaScript -->
            <div id="providerData" data-is-available="<%= provider.isAvailable %>"
                data-business-type="<%= provider.businessType %>" style="display: none;">
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2>Provider Dashboard</h2>
                            <p class="text-muted">Welcome, <%= provider.businessName %>!</p>
                        </div>
                        <div>
                            <button class="btn btn-outline-primary me-2" onclick="refreshDashboard()">
                                üîÑ Refresh
                            </button>
                            <!-- EDIT PROFILE BUTTON -->
                            <button class="btn btn-outline-info me-2" onclick="openEditProfileModal()">
                                ‚úèÔ∏è Edit Profile
                            </button>
                            <button class="btn" id="availabilityBtn" onclick="toggleAvailability()">
                                <!-- Button content will be set by JavaScript -->
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Alert Container -->
            <div id="alertContainer"></div>

            <!-- Quick Stats -->
            <div class="row mt-4">
                <div class="col-md-3 mb-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <h5 class="card-title" id="pendingRequests">
                                <%= nearbyRequests.length %>
                            </h5>
                            <p class="card-text">Pending Requests</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card bg-info text-white">
                        <div class="card-body">
                            <h5 class="card-title" id="activeRequests">0</h5>
                            <p class="card-text">Active Jobs</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <h5 class="card-title" id="completedRequests">0</h5>
                            <p class="card-text">Completed</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card bg-warning text-white">
                        <div class="card-body">
                            <h5 class="card-title">
                                <%= provider.rating || '0.0' %>
                            </h5>
                            <p class="card-text">‚≠ê Rating</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Earnings Section -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">üí∞ Earnings Overview</h5>
                            <button class="btn btn-outline-success btn-sm" onclick="loadEarnings()">
                                üìä Refresh Earnings
                            </button>
                        </div>
                        <div class="card-body">
                            <div id="earningsSection">
                                <div class="text-center">
                                    <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                                    <span class="ms-2">Loading earnings data...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Active Requests Section -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">üîÑ Active Service Requests</h5>
                            <span class="badge bg-primary" id="activeCount">0</span>
                        </div>
                        <div class="card-body">
                            <div id="activeRequestsList">
                                <p class="text-muted">No active requests</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Nearby Requests Section -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">üìã Nearby Service Requests</h5>
                            <span class="badge bg-success" id="nearbyCount">
                                <%= nearbyRequests.length %>
                            </span>
                        </div>
                        <div class="card-body">
                            <% if (nearbyRequests.length> 0) { %>
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Request ID</th>
                                                <th>Service</th>
                                                <th>Customer</th>
                                                <th>Distance</th>
                                                <th>Estimated Pay</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% nearbyRequests.forEach(request=> { %>
                                                <tr id="request-<%= request.requestId %>">
                                                    <td>
                                                        <strong>
                                                            <%= request.requestId %>
                                                        </strong>
                                                        <br>
                                                        <small class="text-muted">
                                                            <%= new Date(request.createdAt).toLocaleTimeString() %>
                                                        </small>
                                                    </td>
                                                    <td>
                                                        <% if (request.serviceType==='fuel' ) { %>
                                                            ‚õΩ <%= request.fuelType %> - <%= request.quantity %>L
                                                                    <% } else { %>
                                                                        üîß <%= request.vehicleType %>
                                                                            <br>
                                                                            <small class="text-muted">
                                                                                <%= request.problemDescription?.substring(0,
                                                                                    30) %>...
                                                                            </small>
                                                                            <% } %>
                                                    </td>
                                                    <td>
                                                        <%= request.user.name %>
                                                            <br>
                                                            <small class="text-muted">
                                                                üìû <%= request.user.phone %>
                                                            </small>
                                                    </td>
                                                    <td>
                                                        <!-- Distance will be calculated dynamically -->
                                                        <span class="badge bg-secondary">Calculating...</span>
                                                    </td>
                                                    <td>
                                                        <strong>‚Çπ<%= request.costEstimate.totalCost %></strong>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-success btn-sm"
                                                            onclick="acceptRequest('<%= request.requestId %>')">
                                                            ‚úÖ Accept
                                                        </button>
                                                        <button class="btn btn-outline-secondary btn-sm mt-1"
                                                            onclick="viewRequestDetails('<%= request.requestId %>')">
                                                            üëÅÔ∏è Details
                                                        </button>
                                                    </td>
                                                </tr>
                                                <% }) %>
                                        </tbody>
                                    </table>
                                </div>
                                <% } else { %>
                                    <div class="text-center py-4">
                                        <p class="text-muted">No nearby service requests at the moment.</p>
                                        <p class="small text-muted">New requests will appear here automatically.</p>
                                    </div>
                                    <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <!-- Request Details Modal -->
        <div class="modal fade" id="requestDetailsModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Request Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body" id="requestDetailsContent">
                        <!-- Content loaded dynamically -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Business Profile Modal -->
        <div class="modal fade" id="editProfileModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Business Profile</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="editProfileForm" enctype="multipart/form-data">
                            <!-- Basic Business Info -->
                            <div class="mb-3">
                                <label class="form-label">Business Name *</label>
                                <input type="text" class="form-control" name="businessName" id="editBusinessName"
                                    required>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Business Address *</label>
                                <textarea class="form-control" name="address" id="editAddress" rows="3"
                                    required></textarea>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Phone Number *</label>
                                        <input type="tel" class="form-control" name="phone" id="editPhone" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Email *</label>
                                        <input type="email" class="form-control" name="email" id="editEmail" required>
                                    </div>
                                </div>
                            </div>

                            <!-- Services for Mechanics -->
                            <div class="mb-3" id="editServicesSection" style="display: none;">
                                <label class="form-label">Services Offered</label>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="services"
                                                value="engine repair" id="editEngineRepair">
                                            <label class="form-check-label">Engine Repair</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="services"
                                                value="tyre change" id="editTyreChange">
                                            <label class="form-check-label">Tyre Change</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="services"
                                                value="battery replacement" id="editBatteryReplacement">
                                            <label class="form-check-label">Battery Replacement</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="services"
                                                value="brake repair" id="editBrakeRepair">
                                            <label class="form-check-label">Brake Repair</label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="services"
                                                value="ac service" id="editAcService">
                                            <label class="form-check-label">AC Service</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="services"
                                                value="electrical repair" id="editElectricalRepair">
                                            <label class="form-check-label">Electrical Repair</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="services"
                                                value="general service" id="editGeneralService">
                                            <label class="form-check-label">General Service</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="services"
                                                value="fuel delivery" id="editFuelDelivery">
                                            <label class="form-check-label">Fuel Delivery</label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Pricing -->
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Assistance Fee (‚Çπ) *</label>
                                        <input type="number" class="form-control" name="assistanceFee"
                                            id="editAssistanceFee" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Travel Fee per Km (‚Çπ) *</label>
                                        <input type="number" class="form-control" name="travelFeePerKm"
                                            id="editTravelFeePerKm" required>
                                    </div>
                                </div>
                            </div>

                            <!-- QR Code Update Section -->
                            <div class="mb-3">
                                <h6>üì± Update QR Code (Optional)</h6>
                                <div class="alert alert-info">
                                    <small>Update your UPI QR code if it has changed</small>
                                </div>

                                <!-- Current QR Code Display -->
                                <div class="mb-2" id="currentQrSection">
                                    <label class="form-label">Current QR Code:</label>
                                    <div class="text-center">
                                        <img id="currentQrImage" src="" alt="Current QR Code"
                                            class="img-thumbnail current-qr-code">
                                        <p class="small text-muted mt-1" id="currentUpiId"></p>
                                    </div>
                                </div>

                                <div class="mb-2">
                                    <label class="form-label">New UPI ID</label>
                                    <input type="text" class="form-control" name="upiId" id="editUpiId"
                                        placeholder="e.g., yourname@ybl, yourname@paytm">
                                </div>

                                <div class="mb-2">
                                    <label class="form-label">New QR Code Image</label>
                                    <input type="file" class="form-control" name="qrCode" accept="image/*">
                                    <div class="form-text">Upload your new UPI QR code image</div>
                                </div>
                            </div>

                            <!-- Business Photos Update Section -->
                            <div class="mb-3">
                                <h6>üè¢ Update Business Photos (Optional)</h6>
                                <div class="alert alert-info">
                                    <small>Add new business photos (existing photos will be kept, maximum 3
                                        total)</small>
                                </div>

                                <!-- Current Business Photos -->
                                <div class="mb-2" id="currentPhotosSection">
                                    <label class="form-label">Current Business Photos:</label>
                                    <div id="currentBusinessPhotos" class="row"></div>
                                </div>

                                <div class="mb-2">
                                    <label class="form-label">Add New Photos</label>
                                    <input type="file" class="form-control" name="businessPhotos"
                                        id="editBusinessPhotos" multiple accept="image/*"
                                        onchange="previewEditBusinessPhotos(this)">
                                    <div class="form-text">Select new photos to add (maximum 3 total including existing)
                                    </div>
                                </div>

                                <div id="editBusinessPhotosPreview" class="row mt-2"></div>
                            </div>

                            <!-- Operating Hours -->
                            <div class="mb-3">
                                <label class="form-label">Operating Hours</label>
                                <div class="row">
                                    <div class="col-md-6">
                                        <input type="time" class="form-control" name="operatingHoursOpen"
                                            id="editOperatingHoursOpen" placeholder="Opening time">
                                    </div>
                                    <div class="col-md-6">
                                        <input type="time" class="form-control" name="operatingHoursClose"
                                            id="editOperatingHoursClose" placeholder="Closing time">
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="updateProviderProfile()">Update
                            Profile</button>
                    </div>
                </div>
            </div>
        </div>

        <%- include('../partials/scripts') %>

            <script>
                // Global variables - Read from data attributes
                let providerData = {
                    isAvailable: document.getElementById('providerData').getAttribute('data-is-available') === 'true',
                    businessType: document.getElementById('providerData').getAttribute('data-business-type')
                };

                // Initialize dashboard
                document.addEventListener('DOMContentLoaded', function () {
                    console.log('üöó Provider Dashboard Initialized');
                    console.log('Provider availability:', providerData.isAvailable);
                    console.log('Business type:', providerData.businessType);
                    updateAvailabilityButton();
                    loadActiveRequests();
                    loadEarnings();
                    startDashboardAutoRefresh();
                });

                // Update availability button state
                function updateAvailabilityButton() {
                    const btn = document.getElementById('availabilityBtn');
                    if (providerData.isAvailable) {
                        btn.className = 'btn btn-success';
                        btn.innerHTML = '‚úÖ Available for Requests';
                    } else {
                        btn.className = 'btn btn-outline-secondary';
                        btn.innerHTML = '‚è∏Ô∏è Not Available';
                    }
                }

                // Toggle availability
                async function toggleAvailability() {
                    try {
                        const response = await fetch('/provider/availability', {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        const data = await response.json();
                        if (data.success) {
                            providerData.isAvailable = data.isAvailable;
                            updateAvailabilityButton();
                            showAlert(data.message, 'success');
                        } else {
                            throw new Error(data.error);
                        }
                    } catch (error) {
                        console.error('Toggle availability error:', error);
                        showAlert('Error updating availability: ' + error.message, 'danger');
                    }
                }

                // Accept service request
                async function acceptRequest(requestId, closeModal = false) {
                    if (!providerData.isAvailable) {
                        showAlert('Please set your status to Available before accepting requests', 'warning');
                        return;
                    }

                    if (!confirm('Are you sure you want to accept this request?')) {
                        return;
                    }

                    try {
                        console.log('‚úÖ Accepting request:', requestId);

                        const response = await fetch(`/api/services/request/${requestId}/assign`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        const data = await response.json();

                        if (data.success) {
                            showAlert('‚úÖ Request accepted successfully!', 'success');

                            // Remove from nearby requests
                            const requestRow = document.getElementById(`request-${requestId}`);
                            if (requestRow) {
                                requestRow.remove();
                            }

                            // Update counts
                            updateRequestCounts();

                            // Close modal if called from modal
                            if (closeModal) {
                                const modal = bootstrap.Modal.getInstance(document.getElementById('requestDetailsModal'));
                                if (modal) {
                                    modal.hide();
                                }
                            }

                            // Refresh active requests after a short delay
                            setTimeout(() => {
                                loadActiveRequests();
                            }, 1000);

                        } else {
                            throw new Error(data.error);
                        }
                    } catch (error) {
                        console.error('Accept request error:', error);
                        showAlert('Error accepting request: ' + error.message, 'danger');
                    }
                }

                // View request details
                function viewRequestDetails(requestId) {
                    console.log('üîç Opening details for request:', requestId);

                    // Show loading state
                    document.getElementById('requestDetailsContent').innerHTML = `
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p class="mt-2">Loading request details...</p>
            </div>
        `;

                    // Fetch request details with photos
                    fetch(`/api/services/request/${requestId}/photos`)
                        .then(response => response.json())
                        .then(photoData => {
                            // Find the request in the nearby requests for basic info
                            const requestRow = document.getElementById(`request-${requestId}`);
                            if (!requestRow) {
                                showAlert('Request not found', 'danger');
                                return;
                            }

                            const serviceType = requestRow.cells[1].innerText.includes('‚õΩ') ? 'fuel' : 'mechanic';
                            const customerInfo = requestRow.cells[2].innerText;
                            const amount = requestRow.cells[4].innerText.replace('‚Çπ', '');

                            // Build modal content with photos
                            let photosHTML = '';
                            if (photoData.success && photoData.photos && photoData.photos.length > 0) {
                                photosHTML = `
                        <div class="mb-3">
                            <h6>üì∏ Problem Photos</h6>
                            <div class="row">
                                ${photoData.photos.map((photo, index) => `
                                    <div class="col-6 col-md-4 mb-2">
                                        <div class="card">
                                            <img src="${photo.url}" class="card-img-top"
                                                 style="height: 120px; object-fit: cover; cursor: pointer;"
                                                 onclick="openPhotoModal('${photo.url}', '${photo.caption}')"
                                                 alt="Problem photo ${index + 1}">
                                            <div class="card-body p-2">
                                                <small class="text-muted">${photo.caption}</small>
                                            </div>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `;
                            } else {
                                photosHTML = '<p class="text-muted">No photos uploaded for this request.</p>';
                            }

                            const modalContent = `
                    <div class="request-details">
                        <h6>üìã Request Information</h6>
                        <div class="mb-3">
                            <p><strong>ID:</strong> ${requestId}</p>
                            <p><strong>Service Type:</strong> ${serviceType}</p>
                            <p><strong>Customer:</strong> ${customerInfo.split('\n')[0]}</p>
                            <p><strong>Phone:</strong> ${customerInfo.split('\n')[1]?.replace('üìû ', '') || 'Not available'}</p>
                            <p><strong>Estimated Pay:</strong> ‚Çπ${amount}</p>
                            ${photoData.problemSeverity ? `<p><strong>Problem Severity:</strong> <span class="badge bg-${getSeverityBadgeColor(photoData.problemSeverity)}">${photoData.problemSeverity}</span></p>` : ''}
                            ${photoData.diagnosticNotes ? `<p><strong>Diagnostic Notes:</strong> ${photoData.diagnosticNotes}</p>` : ''}
                        </div>
                        
                        ${photosHTML}
                        
                        <div class="text-center mt-3">
                            <button class="btn btn-success btn-lg" onclick="acceptRequest('${requestId}', true)">
                                ‚úÖ Accept This Request
                            </button>
                            <button class="btn btn-secondary btn-lg ms-2" data-bs-dismiss="modal">
                                ‚ùå Cancel
                            </button>
                        </div>
                    </div>
                `;

                            document.getElementById('requestDetailsContent').innerHTML = modalContent;

                            // Show modal
                            const modalElement = document.getElementById('requestDetailsModal');
                            const modal = new bootstrap.Modal(modalElement);
                            modal.show();

                            console.log('‚úÖ Modal opened with photos');
                        })
                        .catch(error => {
                            console.error('Error loading request details:', error);
                            document.getElementById('requestDetailsContent').innerHTML = `
                    <div class="alert alert-danger">
                        <h6>‚ùå Error loading request details</h6>
                        <p>${error.message}</p>
                    </div>
                `;
                        });
                }

                // Helper function for severity badge colors
                function getSeverityBadgeColor(severity) {
                    const colors = {
                        'low': 'success',
                        'medium': 'warning',
                        'high': 'danger',
                        'critical': 'dark'
                    };
                    return colors[severity] || 'secondary';
                }

                // Photo modal function
                function openPhotoModal(photoUrl, caption) {
                    const modalHTML = `
            <div class="modal fade" id="photoModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Problem Photo</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body text-center">
                            <img src="${photoUrl}" class="img-fluid" style="max-height: 70vh;" alt="${caption}">
                            ${caption ? `<p class="mt-3">${caption}</p>` : ''}
                        </div>
                    </div>
                </div>
            </div>
        `;

                    // Remove existing photo modal if any
                    const existingModal = document.getElementById('photoModal');
                    if (existingModal) {
                        existingModal.remove();
                    }

                    // Add new modal to body
                    document.body.insertAdjacentHTML('beforeend', modalHTML);

                    // Show modal
                    const photoModal = new bootstrap.Modal(document.getElementById('photoModal'));
                    photoModal.show();
                }

                // Load active requests
                async function loadActiveRequests() {
                    try {
                        const response = await fetch('/provider/active-requests');
                        const data = await response.json();
                        const container = document.getElementById('activeRequestsList');
                        const countBadge = document.getElementById('activeCount');
                        if (data.success && data.activeRequests && data.activeRequests.length > 0) {
                            let html = '';
                            data.activeRequests.forEach(request => {
                                const statusBadge = getStatusBadge(request.status);
                                html += `
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="card-title">
                                            ${request.serviceType === 'fuel' ? '‚õΩ' : 'üîß'}
                                            ${request.requestId}
                                            <span class="badge ${statusBadge.class}">${statusBadge.text}</span>
                                        </h6>
                                        <p class="card-text mb-1">
                                            <strong>Customer:</strong> ${request.user.name} (${request.user.phone})<br>
                                            ${request.serviceType === 'fuel' ?
                                        `<strong>Fuel:</strong> ${request.quantity}L ${request.fuelType}` :
                                        `<strong>Problem:</strong> ${request.problemDescription}`
                                    }
                                        </p>
                                    </div>
                                    <div class="text-end">
                                        <div class="btn-group-vertical">
                                            ${request.status === 'accepted' ? `
                                                <button class="btn btn-outline-primary btn-sm"
                                                    onclick="updateRequestStatus('${request.requestId}', 'en_route')">
                                                    üöó En Route
                                                </button>
                                            ` : ''}
                                            ${request.status === 'en_route' ? `
                                                <button class="btn btn-outline-secondary btn-sm"
                                                    onclick="updateRequestStatus('${request.requestId}', 'service_started')">
                                                    üîß Start Service
                                                </button>
                                            ` : ''}
                                            ${request.status === 'service_started' ? `
                                                <button class="btn btn-outline-success btn-sm"
                                                    onclick="updateRequestStatus('${request.requestId}', 'completed')">
                                                    ‚úÖ Complete
                                                </button>
                                            ` : ''}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                            });
                            container.innerHTML = html;
                            countBadge.textContent = data.activeRequests.length;
                            document.getElementById('activeRequests').textContent = data.activeRequests.length;
                        } else {
                            container.innerHTML = '<p class="text-muted">No active requests</p>';
                            countBadge.textContent = '0';
                            document.getElementById('activeRequests').textContent = '0';
                        }
                    } catch (error) {
                        console.error('Load active requests error:', error);
                        document.getElementById('activeRequestsList').innerHTML =
                            '<p class="text-danger">Error loading active requests</p>';
                    }
                }

                // Update request status
                async function updateRequestStatus(requestId, status) {
                    try {
                        const response = await fetch(`/api/services/request/${requestId}/status`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ status })
                        });
                        const data = await response.json();
                        if (data.success) {
                            showAlert(`‚úÖ Status updated to: ${status.replace('_', ' ')}`, 'success');
                            loadActiveRequests();
                            updateRequestCounts();
                        } else {
                            throw new Error(data.error);
                        }
                    } catch (error) {
                        console.error('Update status error:', error);
                        showAlert('Error updating status: ' + error.message, 'danger');
                    }
                }

                // Refresh dashboard data
                async function refreshDashboard() {
                    window.location.reload();
                }

                // Auto-refresh dashboard every 15 seconds
                function startDashboardAutoRefresh() {
                    console.log('üîÑ Starting auto-refresh (15s intervals)');
                    // Set up interval
                    setInterval(() => {
                        console.log('üîÑ Auto-refreshing dashboard data...');
                        loadActiveRequests();
                        updateRequestCounts();
                    }, 15000);
                }

                // Update request counts
                function updateRequestCounts() {
                    const nearbyCount = document.querySelectorAll('tbody tr').length;
                    document.getElementById('nearbyCount').textContent = nearbyCount;
                    document.getElementById('pendingRequests').textContent = nearbyCount;
                }

                // Utility functions
                function getStatusBadge(status) {
                    const statusMap = {
                        'pending': { class: 'bg-warning', text: 'Pending' },
                        'accepted': { class: 'bg-info', text: 'Accepted' },
                        'en_route': { class: 'bg-primary', text: 'En Route' },
                        'service_started': { class: 'bg-secondary', text: 'Service Started' },
                        'completed': { class: 'bg-success', text: 'Completed' }
                    };
                    return statusMap[status] || { class: 'bg-secondary', text: status };
                }

                function showAlert(message, type) {
                    const alertContainer = document.getElementById('alertContainer');
                    const alertId = 'alert-' + Date.now();
                    const alertHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" id="${alertId}" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
                    alertContainer.innerHTML = alertHTML;
                    setTimeout(() => {
                        const alert = document.getElementById(alertId);
                        if (alert) {
                            alert.remove();
                        }
                    }, 5000);
                }

                // Load provider earnings
                async function loadEarnings() {
                    try {
                        const earningsSection = document.getElementById('earningsSection');
                        earningsSection.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                    <span class="ms-2">Loading earnings data...</span>
                </div>
            `;
                        const response = await fetch('/api/payments/earnings');
                        const data = await response.json();
                        if (data.success) {
                            const earnings = data.earnings;
                            let earningsHTML = `
                    <div class="row text-center">
                        <div class="col-md-6 mb-3">
                            <div class="card bg-success text-white">
                                <div class="card-body">
                                    <h4 class="card-title">‚Çπ${earnings.total || 0}</h4>
                                    <p class="card-text">Total Earnings</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="card bg-info text-white">
                                <div class="card-body">
                                    <h4 class="card-title">${earnings.paymentCount || 0}</h4>
                                    <p class="card-text">Completed Services</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                            earningsSection.innerHTML = earningsHTML;
                            document.getElementById('completedRequests').textContent = earnings.paymentCount || '0';
                        } else {
                            throw new Error(data.error);
                        }
                    } catch (error) {
                        console.error('Load earnings error:', error);
                        document.getElementById('earningsSection').innerHTML = `
                <div class="alert alert-danger">
                    <h6>‚ùå Error loading earnings</h6>
                    <p class="mb-0 small">${error.message}</p>
                </div>
            `;
                    }
                }

                // EDIT PROFILE FUNCTIONS

                // Open Edit Profile Modal
                function openEditProfileModal() {
                    // Load current provider data
                    loadProviderDataForEdit();

                    const modal = new bootstrap.Modal(document.getElementById('editProfileModal'));
                    modal.show();
                }

                // Load provider data for editing
                async function loadProviderDataForEdit() {
                    try {
                        const response = await fetch('/provider/profile');
                        const data = await response.json();

                        if (data.success) {
                            const provider = data.provider;

                            // Fill form fields
                            document.getElementById('editBusinessName').value = provider.businessName;
                            document.getElementById('editAddress').value = provider.address;
                            document.getElementById('editPhone').value = provider.phone;
                            document.getElementById('editEmail').value = provider.email;
                            document.getElementById('editAssistanceFee').value = provider.pricing.assistanceFee;
                            document.getElementById('editTravelFeePerKm').value = provider.pricing.travelFeePerKm;
                            document.getElementById('editUpiId').value = provider.upiId || '';

                            // Show/hide services section for mechanics
                            if (provider.businessType === 'mechanic') {
                                document.getElementById('editServicesSection').style.display = 'block';
                                // Check relevant service checkboxes
                                if (provider.services && Array.isArray(provider.services)) {
                                    provider.services.forEach(service => {
                                        const checkbox = document.getElementById(`edit${service.charAt(0).toUpperCase() + service.slice(1).replace(' ', '')}`);
                                        if (checkbox) checkbox.checked = true;
                                    });
                                }
                            }

                            // Fill operating hours
                            if (provider.operatingHours) {
                                document.getElementById('editOperatingHoursOpen').value = provider.operatingHours.open || '';
                                document.getElementById('editOperatingHoursClose').value = provider.operatingHours.close || '';
                            }

                            // Display current QR code
                            if (provider.qrCode && provider.qrCode.url) {
                                document.getElementById('currentQrImage').src = provider.qrCode.url;
                                document.getElementById('currentUpiId').textContent = `UPI ID: ${provider.upiId || 'Not set'}`;
                            } else {
                                document.getElementById('currentQrSection').innerHTML = '<p class="text-muted">No QR code uploaded yet</p>';
                            }

                            // Display current business photos
                            displayCurrentBusinessPhotos(provider.businessPhotos);

                        } else {
                            throw new Error(data.error);
                        }
                    } catch (error) {
                        console.error('Error loading provider data:', error);
                        showAlert('Error loading profile data: ' + error.message, 'danger');
                    }
                }

                // Display current business photos
                function displayCurrentBusinessPhotos(photos) {
                    const container = document.getElementById('currentBusinessPhotos');

                    if (!photos || photos.length === 0) {
                        container.innerHTML = '<p class="text-muted">No business photos uploaded yet</p>';
                        return;
                    }

                    let html = '';
                    photos.forEach((photo, index) => {
                        html += `
                <div class="col-4 mb-2">
                    <div class="photo-preview-card position-relative">
                        <img src="${photo.url}" class="img-thumbnail business-photo-preview w-100">
                        <button type="button" class="delete-photo-btn" onclick="deleteBusinessPhoto(${index})">
                            √ó
                        </button>
                    </div>
                </div>
            `;
                    });

                    container.innerHTML = html;
                }

                // Delete business photo
                async function deleteBusinessPhoto(photoIndex) {
                    if (!confirm('Are you sure you want to delete this photo?')) {
                        return;
                    }

                    try {
                        const response = await fetch(`/provider/business-photo/${photoIndex}`, {
                            method: 'DELETE'
                        });

                        const data = await response.json();
                        if (data.success) {
                            showAlert('‚úÖ Business photo deleted successfully', 'success');
                            // Reload provider data to refresh the display
                            loadProviderDataForEdit();
                        } else {
                            throw new Error(data.error);
                        }
                    } catch (error) {
                        console.error('Error deleting business photo:', error);
                        showAlert('Error deleting photo: ' + error.message, 'danger');
                    }
                }

                // Preview business photos for edit modal
                function previewEditBusinessPhotos(input) {
                    const preview = document.getElementById('editBusinessPhotosPreview');
                    preview.innerHTML = '';

                    if (input.files && input.files.length > 0) {
                        const files = Array.from(input.files);

                        files.forEach((file, index) => {
                            if (file.type.startsWith('image/')) {
                                const reader = new FileReader();

                                reader.onload = function (e) {
                                    const col = document.createElement('div');
                                    col.className = 'col-4 mb-2';
                                    col.innerHTML = `
                            <div class="photo-preview-card">
                                <img src="${e.target.result}" class="img-thumbnail business-photo-preview w-100">
                                <small class="d-block text-center mt-1">New Photo ${index + 1}</small>
                            </div>
                        `;
                                    preview.appendChild(col);
                                };

                                reader.readAsDataURL(file);
                            }
                        });

                        if (files.length > 0) {
                            showAlert(`‚úÖ ${files.length} new photo(s) selected for upload`, 'info');
                        }
                    }
                }

                // Update provider profile
                // Update provider profile
                // Update provider profile - SIMPLIFIED VERSION
                // Update provider profile - SIMPLIFIED
                async function updateProviderProfile() {
                    try {
                        const form = document.getElementById('editProfileForm');
                        const formData = new FormData(form);

                        // MANUALLY REMOVE operatingHours fields that might confuse multer
                        formData.delete('operatingHoursOpen');
                        formData.delete('operatingHoursClose');

                        // Add operating hours as separate fields
                        const operatingHoursOpen = document.getElementById('editOperatingHoursOpen').value;
                        const operatingHoursClose = document.getElementById('editOperatingHoursClose').value;
                        if (operatingHoursOpen) formData.append('operatingHoursOpen', operatingHoursOpen);
                        if (operatingHoursClose) formData.append('operatingHoursClose', operatingHoursClose);

                        console.log('üîç Fields being sent:', Array.from(formData.keys()));

                        const response = await fetch('/provider/update-profile', {
                            method: 'PUT',
                            body: formData
                        });

                        const data = await response.json();
                        if (data.success) {
                            showAlert('‚úÖ Profile updated successfully!', 'success');
                            const modal = bootstrap.Modal.getInstance(document.getElementById('editProfileModal'));
                            modal.hide();
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        } else {
                            throw new Error(data.error);
                        }
                    } catch (error) {
                        console.error('Error updating profile:', error);
                        showAlert('Error updating profile: ' + error.message, 'danger');
                    }
                }
            </script>

            <style>
                .business-photo-preview {
                    max-height: 150px;
                    object-fit: cover;
                }

                .photo-preview-card {
                    position: relative;
                }

                .delete-photo-btn {
                    position: absolute;
                    top: 5px;
                    right: 5px;
                    background: rgba(255, 0, 0, 0.8);
                    color: white;
                    border: none;
                    border-radius: 50%;
                    width: 25px;
                    height: 25px;
                    font-size: 12px;
                }

                .current-qr-code {
                    max-width: 200px;
                    border: 2px solid #dee2e6;
                    border-radius: 8px;
                }
            </style>