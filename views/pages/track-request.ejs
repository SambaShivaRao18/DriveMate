<%- include('../partials/header') %>
<%- include('../partials/navbar') %>

<main class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2>Track Your Service Request</h2>
            <p class="text-muted">Real-time updates on your roadside assistance</p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-8 mx-auto">
            <div class="card">
                <div class="card-body">
                    <div id="trackingContent">
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status"></div>
                            <p class="mt-3">Loading your service request...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<%- include('../partials/scripts') %>

<script>
// Get request ID from URL or use demo
const urlParams = new URLSearchParams(window.location.search);
const requestId = urlParams.get('id') || 'DEMO-REQUEST';

// Load tracking information
async function loadTracking() {
    try {
        const response = await fetch(`/api/services/request/${requestId}`);
        const data = await response.json();
        
        const trackingContent = document.getElementById('trackingContent');
        
        if (data.success) {
            const request = data.request;
            const statusSteps = [
                { status: 'pending', label: 'Request Received', icon: 'üìù' },
                { status: 'accepted', label: 'Provider Assigned', icon: '‚úÖ' },
                { status: 'en_route', label: 'Provider En Route', icon: 'üöó' },
                { status: 'service_started', label: 'Service Started', icon: 'üîß' },
                { status: 'completed', label: 'Service Completed', icon: 'üéâ' }
            ];
            
            let currentStepIndex = statusSteps.findIndex(step => step.status === request.status);
            if (currentStepIndex === -1) currentStepIndex = 0;
            
            let trackingHTML = `
                <h4 class="text-center mb-4">${request.serviceType === 'fuel' ? '‚õΩ' : 'üîß'} Service Request #${request.requestId}</h4>
                
                <!-- Status Timeline -->
                <div class="timeline">
            `;
            
            statusSteps.forEach((step, index) => {
                const isCompleted = index <= currentStepIndex;
                const isCurrent = index === currentStepIndex;
                
                trackingHTML += `
                    <div class="timeline-step ${isCompleted ? 'completed' : ''} ${isCurrent ? 'current' : ''}">
                        <div class="timeline-icon">${step.icon}</div>
                        <div class="timeline-content">
                            <h6>${step.label}</h6>
                            ${isCurrent ? `<p class="text-primary mb-0">In Progress</p>` : ''}
                        </div>
                    </div>
                `;
            });
            
            trackingHTML += `
                </div>
                
                <!-- Provider Info -->
                <div class="mt-4 p-3 bg-light rounded">
                    <h6>Service Provider</h6>
                    ${request.assignedProvider ? `
                        <p class="mb-1"><strong>${request.assignedProvider.businessName}</strong></p>
                        <p class="mb-1">üìû ${request.assignedProvider.phone}</p>
                        <p class="mb-0">üìç ${request.assignedProvider.address}</p>
                    ` : `
                        <p class="text-warning mb-0">Waiting for provider assignment...</p>
                    `}
                </div>
                
                <!-- Service Details -->
                <div class="mt-3">
                    <h6>Service Details</h6>
                    <p class="mb-1"><strong>Vehicle:</strong> ${request.vehicleType}</p>
                    ${request.serviceType === 'fuel' ? `
                        <p class="mb-1"><strong>Fuel:</strong> ${request.quantity}L ${request.fuelType}</p>
                    ` : `
                        <p class="mb-1"><strong>Problem:</strong> ${request.problemDescription}</p>
                    `}
                    <p class="mb-0"><strong>Estimated Cost:</strong> ‚Çπ${request.costEstimate.totalCost}</p>
                </div>
            `;
            
            trackingContent.innerHTML = trackingHTML;
        } else {
            trackingContent.innerHTML = `
                <div class="alert alert-danger text-center">
                    <h5>Request Not Found</h5>
                    <p>We couldn't find service request #${requestId}</p>
                    <a href="/dashboard" class="btn btn-primary">Back to Dashboard</a>
                </div>
            `;
        }
    } catch (error) {
        console.error('Tracking error:', error);
        document.getElementById('trackingContent').innerHTML = `
            <div class="alert alert-danger text-center">
                <h5>Error Loading Request</h5>
                <p>Please try again later</p>
            </div>
        `;
    }
}

// Auto-refresh tracking every 15 seconds
function startTrackingRefresh() {
    setInterval(loadTracking, 15000);
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    loadTracking();
    startTrackingRefresh();
});
</script>

<style>
.timeline {
    position: relative;
    padding-left: 30px;
}

.timeline-step {
    position: relative;
    margin-bottom: 20px;
    display: flex;
    align-items: flex-start;
}

.timeline-step.completed .timeline-icon {
    background-color: #28a745;
    color: white;
}

.timeline-step.current .timeline-icon {
    background-color: #007bff;
    color: white;
    animation: pulse 2s infinite;
}

.timeline-step:not(.completed):not(.current) .timeline-icon {
    background-color: #6c757d;
    color: white;
}

.timeline-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 15px;
    flex-shrink: 0;
}

.timeline-content h6 {
    margin-bottom: 5px;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}
</style>